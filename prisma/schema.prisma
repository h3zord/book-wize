generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?   @map("avatar_url")
  created_at    DateTime  @default(now())

  accounts Account[]
  sessions Session[]
  ratings  Rating[]
  readings Reading[]

  @@map("users")
}

model Book {
  id          String   @id @default(uuid())
  name        String
  author      String
  summary     String
  cover_url   String
  total_pages Int
  created_at  DateTime @default(now())

  categories CategoriesOnBooks[]
  ratings    Rating[]
  readings   Reading[]

  @@map("books")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model Rating {
  id          String   @id @default(uuid())
  rate        Int
  description String
  created_at  DateTime @default(now())
  book_id     String
  user_id     String

  book Book @relation(fields: [book_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, book_id])
  @@map("ratings")
}

model Reading {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  user_id    String
  book_id    String

  book Book @relation(fields: [book_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@unique([user_id, book_id])
  @@map("readings")
}

model CategoriesOnBooks {
  book_id     String
  category_id String

  book     Book     @relation(fields: [book_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@id([book_id, category_id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
